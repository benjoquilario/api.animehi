// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           String    @default("USER")

  image    String?
  accounts Account[]
  sessions Session[]

  comments        Comment[]
  commentLikes    CommentLike[]
  commentDislikes CommentDislike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Comment {
  id             String           @id @default(cuid())
  content        String
  createdAt      DateTime         @default(now())
  animeId        String
  episodeId      String
  updatedAt      DateTime         @updatedAt
  episodeNumber  String
  isEdited       Boolean?
  title          String?
  isSpoiler      Boolean          @default(false)
  commentLike    CommentLike[]
  commentDislike CommentDislike[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model CommentDislike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}
